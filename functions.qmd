---
jupyter: python3
---

# Functions

You have probably noticed, but if not, we have been using built-in functions in the previous chapters already. Python ships with a number of useful functions that are readily at your disposal. If you want or need to build your own, that is also possible. 

## Built-in functions

Let's take a look at a few built-in functions and how they can be used. Here are a few examples (some of which we've already encountered):

- `print()`: prints the given argument(s) to the console
- `type()`: returns the type of the given argument
- `len()`: returns the length of the given argument

Using basic functions is dead simple. Usually the function has some arguments which the user passes on to the function as input. Let's try the functions above to get a feel for how they work:

```{python}
#| code-fold: false

my_list = ["Hello", "I'm", 1, "list", True]

print(my_list)
```

So, we see that the `print()` function can be used to print out the contents of the input parameter into the console. Makes sense, right?

If we inspect the type of the `my_list` variable, we can (rather unsurprisingly) see that it is a list:

```{python}
#| code-fold: false

type(my_list)
```

We can also confirm that the third element of the list is an integer:

```{python}
#| code-fold: false

type(my_list[2])
```

And finally, our list contains 5 elements in total, as we can see when we pass `my_list` to the `len()` function:

```{python}
#| code-fold: false

len(my_list)
```

That's the basics of using built-in functions. There are loads of other functions, but we won't cover them here. They are best learned when needed. Next we'll see how to build our own functions.

## User-defined functions

Custom-made functions are a way to encapsulate code that you want to reuse. They are defined using the `def` keyword, followed by the function name, and a colon. 

```{python}	
#| code-fold: false

# creating a custom function
def my_function():
    # enter the code you wish to run below
    # note that the indentation is important here as well
    print("Hello I'm a custom-made function!")

# calling the function
my_function()
```

Although the function above isn't particulrly useful, it is still a valid function. We can make our functions more useful by adding some parameters when defining them.

```{python}
#| code-fold: false

# creating a custom function with parameters
def my_function_with_args(name):
    print(f"Hello {name}, I'm a custom-made function with arguments!")

# we can now pass an argument to the function when calling it
my_function_with_args("John")
```

We can also return values from functions. This is done using the `return` keyword.

```{python}
#| code-fold: false

def num_squared(num = 2):
    returned_value = num ** 2
    return returned_value

num_squared()
```	

As we saw above, we can also set default values for the parameters of the function. The default value will be used if the user doesn't pass any arguments to the function.

:::{.callout-note}
Variables defined inside a function are not accessible outside of it. This is called the scope of the variable.
:::

### Documenting your function

It is a good practice to document your functions. This is done by adding something called a docstring to the function. A docstring is a string that is placed at the beginning of the function and is enclosed in triple quotes.

```{python}
#| code-fold: false

def my_function_with_args(name):
    """
    This function takes a name as an argument and prints a greeting.
    """
    print(f"Hello {name}, I'm a custom-made function with arguments!")

```	

The docstring can be accessed by using the `__doc__` attribute of the function.

```{python}
#| code-fold: false

print(my_function_with_args.__doc__)
```

## Lambda expressions

## Methods