---
jupyter: python3
---

# Functions

You have probably noticed, but if not, we have been using built-in functions in the previous chapters already. Python ships with a number of useful functions that are readily at your disposal. If you want or need to build your own, that is also possible. 

## Built-in functions

Let's take a look at a few built-in functions and how they can be used. Here are a few examples (some of which we've already encountered):

- `print()`: prints the given argument(s) to the console
- `type()`: returns the type of the given argument
- `len()`: returns the length of the given argument

Using basic functions is dead simple. Usually the function has some arguments which the user passes on to the function as input. Let's try the functions above to get a feel for how they work:

```{python}
#| code-fold: false

my_list = ["Hello", "I'm", 1, "list", True]

print(my_list)
```

So, we see that the `print()` function can be used to print out the contents of the input parameter into the console. Makes sense, right?

If we inspect the type of the `my_list` variable, we can (rather unsurprisingly) see that it is a list:

```{python}
#| code-fold: false

type(my_list)
```

We can also confirm that the third element of the list is an integer:

```{python}
#| code-fold: false

type(my_list[2])
```

And finally, our list contains 5 elements in total, as we can see when we pass `my_list` to the `len()` function:

```{python}
#| code-fold: false

len(my_list)
```

That's the basics of using built-in functions. There are loads of other functions, but we won't cover them here. They are best learned when needed. Next we'll see how to build our own functions.

## User-defined functions

Custom-made functions are a way to encapsulate code that you want to reuse. They are defined using the `def` keyword, followed by the function name, and a colon. 

```{python}	
#| code-fold: false

# creating a custom function
def my_function():
    # enter the code you wish to run below
    # note that the indentation is important here as well
    print("Hello I'm a custom-made function!")

# calling the function
my_function()
```

Although the function above isn't particulrly useful, it is still a valid function. We can make our functions more useful by adding some parameters when defining them.

```{python}
#| code-fold: false

# creating a custom function with parameters
def my_function_with_args(name):
    print(f"Hello {name}, I'm a custom-made function with arguments!")

# we can now pass an argument to the function when calling it
my_function_with_args("John")
```

We can also return values from functions. This is done using the `return` keyword.

```{python}
#| code-fold: false

def num_squared(num = 2):
    returned_value = num ** 2
    return returned_value

num_squared()
```	

As we saw above, we can also set default values for the parameters of the function. The default value will be used if the user doesn't pass any arguments to the function.

:::{.callout-note}
Variables defined inside a function are not accessible outside of it. For example, we can't directly call the `returned_value` variable outside of the `num_squared` function.
This is called the scope of the variable.
:::

### Documenting your function

It is a good practice to document your functions. This is done by adding something called a docstring to the function. A docstring is a string that is placed at the beginning of the function and is enclosed in triple quotes. You can include text that describes what the function does and how it is used, i.e., what arguments it takes, and what it returns. This is especially useful with more complex functions.

```{python}
#| code-fold: false

def my_function_with_args(name):
    """
    This function takes a name as an argument and prints a greeting.
    """
    print(f"Hello {name}, I'm a custom-made function with arguments!")

```	

The docstring can be accessed by using the `__doc__` attribute of the function.

```{python}
#| code-fold: false

print(my_function_with_args.__doc__)
```

## Lambda expressions

Lamdas are a way to create small, anonymous functions. They are defined using the `lambda` keyword, followed by the arguments, a colon, and the expression to evaluate.

Let's say we have a simple function, which can be described in one line of code. We can naturally define a proper function like this:

```{python}
#| code-fold: false

def add(a, b):
    return a + b
```

However, we can also accomplish the same by using a lambda expression:

```{python}	
#| code-fold: false

lambda a, b: a + b
```

We can use the following syntax to pass arguments to the lambda expression for evaluation:

```{python}
#| code-fold: false

(lambda a, b: a + b)(2, 3)
```

Now, why would we want to do this you might ask?

Let's say we want to raise a bunch of numbers to the second power. We could do this by first defining a function and the passing it on to the `map()` function, which applies the function to each element of a list.

```{python}
#| code-fold: false

def squared(x):
    return x ** 2

list(map(squared, [1, 2, 3, 4, 5]))
```

This works, and is perfectly fine. However, the `squared()` function is quite simple, so it seems a bit silly to write a separate function for this. Here is where the lambda expression comes in handy. It allows us to accomplish the same thing in a more concise way:

```{python}
#| code-fold: false
# same with a lambda expression
list(map(lambda x: x ** 2, [1, 2, 3, 4, 5]))
```	

We get the same result, but with less code. Lambda expressions are especially useful when you need to pass a simple function as an argument to another function. We will work more with them once we familiarize ourselves with Pandas DataFrames.

## Methods

What are methods and how do they differ from functions? In Python, methods are functions that are associated with an object. They are called using the dot notation, i.e., `object.method()`. A common methods associated with strings is the `upper()` method, which converts all characters in a string to uppercase. Let's take a look shall we?

```{python}
#| code-fold: false

my_string = "hello, I'm a string"

my_string.upper()
```

You can browse methods associated with an object by using the `dir()` function. This will return a list of all the methods associated with the object.

```{python}
#| code-fold: false
# storing the methods associated with the my_string object in a variable
methods_for_my_string = dir(my_string)

# printing the last 5 methods
methods_for_my_string[-5:]
```

You can also use the `help()` function to get more information about a method. This will return a description of the method, as well as the arguments it takes.

```{python}
#| code-fold: false

help(my_string.upper)
```

What makes methods so powerful is that they can be chained together. This means that you can call multiple methods on the same object in a single line of code. Let's see an example of this:

```{python}
#| code-fold: false

my_string.upper().split()
```

## Using `help()` for functions and classes

Help is a great way to get more information about a method, especially when you are not sure how to use it. It also works for functions and classes.

```{python}
#| code-fold: false
help(help)
```

```{python}
#| code-fold: false
help(list)
```

That's it for functions and methods. We will use them extensively in the upcoming chapters, so make sure you understand how they work.

## Conclusion

The first three chapters introduced us to the basics of Python programming. Next we will start discussing how to use the language for processing and analyzing data. In case you are looking to strengthen your understanding of the fundamentals, the Python tutorial on the official Python website is a great place to learn more (@PythonTutorial).