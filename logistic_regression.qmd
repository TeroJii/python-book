---
jupyter: python3
---

# Logistic regression

In the previous chapter we learned about linear regression. The word regression is used in the context of statistical modelling to refer to the act of estimating the relationship between a dependent variable and one or more independent variables. However, sometimes what we are trying to predict might not be a continuous numerical variable, but categorical. In such cases, instead of a regression problem, we are dealing with classification. In the simplest case, there are only two distinct classes. This is called binary classification. One of the simplests algorithms for solving these types of problems is called logistic regression, which despite its name, is used for classification.

## Univariate logistic regression {#sec-univariate}

In univariate logistic regression, we have a single independent variable and a binary dependent variable. The goal is to estimate the probability that the dependent variable is 1, based on the value of the independent variable. This implies that the values of the categorical dependent variable are assigned so-called dummy values, and are therefore coded as 0 and 1. For example, if we are trying to predict whether a student will pass or fail an exam based on the number of hours they studied, we can code the dependent variable as 1 if the student passed and 0 if they failed.

The logistic function is used to model the relationship between the inpedendent and dependent variables. The logistic function is defined as:

$$
y = \frac{1}{1 + e^{-(\beta_0 + \beta_1 x)}},
$$ {#eq-logistic}

where $y$ is again the dependent variable, and $x$ is the independent variable, and $\beta_0$ and $\beta_1$ are the parameters of the model. As you might have noticed, the exponential term contains the linear regression equation. This is not a coincidence. The logistic regression uses something called the sigmoid function, which basically transforms the output of the linear regression into a probability. The sigmoid function is defined as:

$$
\sigma(z) = \frac{1}{1 + e^{-z}}.
$$ {#eq-sigmoid}

If we plot out the sigmoid function, we can see that it has a distinct shape, which somewhat resembles the letter S. @fig-sigmoid shows the sigmoid function with $z$ on the x-axis and $\sigma(z)$ on the y-axis.

```{python}
#| label: fig-sigmoid
#| fig-cap: The shape of the sigmoid function has a distinct S-like shape.

import numpy as np
import matplotlib.pyplot as plt

def sigmoid(z):
    return 1 / (1 + np.exp(-z))

z = np.linspace(-10, 10, 100)

plt.plot(z, sigmoid(z))
plt.xlabel('z')
plt.ylabel('Ïƒ(z)')
plt.title('Sigmoid function')

plt.show()
```

The beauty of the Sigmoid function is that it coerces any input to the variable $z$ to lie between 0 and 1. This is exactly what we need for a probability. In other words, if the values we are trying to predict are binary, with values 0 and 1, the sigmoid function will essentially give us the probability that the value is 1.

## Fitting a univariate logistic regression model

Let's see how we can fit a logistic regression model in practice. For this, we will explore the  [UCI ML Repository Breast cancer dataset](https://archive.ics.uci.edu/dataset/15/breast+cancer+wisconsin+original), which contains information about breast cancer patients (@UCIBreastCancer1992). **Add one more citation...**
@tbl-bc_data shows the first few rows of the dataset. The `Class` column contains the dependents variable. Benign cases are labelled with 2, whereas malignant cases are labelled with 4.

```{python}
#| label: tbl-bc_data
#| tbl-cap: The first few rows of the slightly modified UCI ML Repository original Breast cancer dataset.
import pandas as pd

bc_data = pd.read_csv('data/uci_bc_mod.csv')

bc_data.head()
```

### Visualizing the data

Let's start by plotting the `Uniformity_of_cell_size` variable against the `Class` variable.
We'll recode the class variable so that benign cases are labelled as 0 and malignant cases as 1.
@fig-bc_data shows the relationship between the two variables with a logistic model fit using Seaborn.  

```{python}
#| label: fig-bc_data
#| fig-cap: The relationship between the uniformity of cell size and the class variable in the Breast cancer dataset. The line represents a univariate logistic regression fit, which predicts that the larger the recorded value for the uniformity of cell size, the higher the probability for the class being malignant.

import seaborn as sns

# let's recode Class labels as 0 (=2) and 1 (=4)
bc_data['Class'] = bc_data['Class'].map({2: 0, 4: 1})

sns.lmplot(data=bc_data, x='Uniformity_of_cell_size', 
y='Class', logistic=True, ci=95, height=4, aspect=1.5)
```	

Just by looking at the scatter plot, it is not obvious to tell what the relationship between the two variables is. 
However, the logistic regression line helps us to see the relationship more clearly. Let's plot the class distributions as histograms to clarify the relationship between the two variables (@fig-bc_hist).

```{python}
#| label: fig-bc_hist
#| fig-cap: The histograms show the distribution of the uniformity of cell size for benign and malignant cases. The distribution of the uniformity of cell size is skewed towards higher values for malignant cases.

sns.histplot(data=bc_data, x='Uniformity_of_cell_size', hue='Class', 
bins=20, kde=True)
```

The histogram clarifies why the logistic regression line is shaped the way it is. Most benign cases appear to have smaller values for the uniformity of cell size.

### Fitting the model

Above we visualized the logistic relationship between the `Uniformity_of_cell_size` variable and the `Class` variable using `seaborn`.
We are now ready to use `scikit-learn` to fit a logistic regression model to the data. 
Let's start by splitting the data into training and testing sets.


```{python}
#| code-fold: false

from sklearn.model_selection import train_test_split

X = bc_data[['Uniformity_of_cell_size']]
y = bc_data['Class']

# train test split
X_train, X_test, y_train, y_test = train_test_split(X, 
y, test_size=0.3, random_state=42, stratify=y)
```

We used the `train_test_split` function again to split the data into training and testing sets. 
The `stratify` parameter ensures that the distribution of the target variable is the same in both train and test sets. 
This is important if the target variable displays a class imbalance. 
In our case the target variable is not terribly unbalanced, but it is still good practice to learn to use the `stratify` parameter.

```{python}
#| code-fold: false

# class distribution for benign and malignant cases
bc_data['Class'].value_counts()
```

We can now use the `LogisticRegression` class from the `linear_model` module. 
The `fit` method is used to train the model. Summary of the model parameters is shown in @tbl-model_summary.

```{python}
#| code-fold: false

# fitting the model
from sklearn.linear_model import LogisticRegression

log_reg = LogisticRegression()
log_reg.fit(X_train, y_train)
```

```{python}
#| label: tbl-model_summary
#| tbl-cap: Summary of the logistic regression model parameters.

model_summary = pd.DataFrame(
    data=np.array([log_reg.intercept_, log_reg.coef_[0]]),
    index=['Intercept', 'Uniformity_of_cell_size'], 
    columns=['Coefficient'])

model_summary
```

### Making predictions

We have managed to fit a model to the training data, but thus far our only result is the model parameters, which are quite abstract.
To get a better sense of how well we are doing, in terms of prediction accuracy, let's make predictions on our test data.
As you might recall from the previous chapter, we can use the `predict` method to make predictions.

```{python}
#| code-fold: false

# making predictions
y_pred = log_reg.predict(X_test)

y_pred[:5]
```

By looking at the first five predictions, we can see that the model predicts the class of the test data. But how does it actually do that? By looking at the logistic regression curve in @fig-bc_data, we see that the curve should predict a continuous floating point value between 0 and 1. Yet our predictions seem to be binary. 

The predict method actually uses a threshold of 0.5 to decide whether the predicted value should be 0 or 1. If the predicted value is greater than 0.5, the prediction is 1, otherwise it is 0. This makes perfect sense when we think of the output values as probabilities.

### Evaluating the model

Now that we have our predictions, we can compare them to the actual values in the test set.
For linear regression we used a scatter plot as visual means for comparing the predictions to the actual values. @fig-scatter-results shows the scatter plot of the actual values against the predicted values for the logistic regression model. However, upon inspection we notice that this approach doesn't really work with classification problems.

```{python}
#| label: fig-scatter-results
#| fig-cap: The scatter plot shows the actual values against the predicted values for the logistic regression model. We can see that this is not at all a good way to evaluate a classification model. In fact, this plot does not tell us anything useful.
#| code-fold: true

plot = sns.scatterplot(x = y_test, y = y_pred)
plot.set_xlabel('Actual values')
plot.set_ylabel('Predicted values')

plot.figure.set_size_inches(5, 4)

plt.show()
```

Luckily, there are other ways to visualize our results. Something called a confusion matrix will be more helpful here. Let's visualize the confusion matrix for our case before digging in deeper (@fig-confusion-matrix).

```{python}
#| label: fig-confusion-matrix
#| fig-cap: The confusion matrix shows the true class labels against the predicted classes for our test data. The numeric values indicate the number of cases in each category. The diagonal elements correspond to correctly classified cases.
#| code-fold: false

from sklearn.metrics import confusion_matrix

cm = confusion_matrix(y_test, y_pred)

cm_plot = sns.heatmap(cm, annot=True, fmt='d', cmap='Blues', cbar=False)

cm_plot.set_xlabel('Predicted Malignancy Class')
cm_plot.set_ylabel('Actual Class')

plt.show()
```

Let's break down what is happening above. 
As we recall, we labelled benign cases as 0 and malignant cases as 1.
In other words, our diagnosis would be positive for a person with cancer. Vice versa, a negative diagnosis would be a person without cancer. 
The confusion matrix shows us how well our predictions match the actual class labels.
We have four possible outcomes:

- True positive (TP): We have predicted that a person has cancer, and they actually have cancer (lower right quadrant)
- True negative (TN): We have predicted that a person does not have cancer, and they actually do not have cancer (upper left quadrant)
- False positive (FP): We have predicted that a person has cancer, but they actually do not have cancer (upper right quadrant)
- False negative (FN): We have predicted that a person does not have cancer, but they actually do have cancer (lower left quadrant).

Intuitively, we can see that we would like to see as many cases in the diagonal elements of the confusion matrix to maximize the "goodness" of our predictions.
The four categorries above allow us to calculate a set of more formally defined metrics, which are generally used to evaluate the performance of classification models.

## Metrics for evaluating classification models

There's a long list of different metrics which have been developed to evaluate the performance of binary classification models.
Below we will introduce some of the most common ones, but take note that the list is not by any means exhaustive.

### Accuracy

Probably the easiest metric to understand is accuracy. It is defined as the number of correct predictions divided by the total number of predictions.
We can define it using the four categories above as follows:

$$
\text{Accuracy} = \frac{\text{TP} + \text{TN}}{\text{TP} + \text{TN} + \text{FP} + \text{FN}}.
$$

In the case our univariate logistic regression fit, the accuracy of the model is calculated as:

```{python}
#| code-fold: false
(59 + 130) / (59 + 130 + 3 + 13)
```

You might have already guessed it, but scikit-learn ships with a convenient function for calculating accuracy.

```{python}
#| code-fold: false

from sklearn.metrics import accuracy_score

accuracy_score(y_test, y_pred)
```

Our simple logistic regression model is able to predict 92% of the cases in the test set correctly.
This is pretty well, considering that we only used a single variable to make the predictions.

:::{.callout-warning}
## Accuracy alone may be misleading

Let's consider a rare disease, which only appears in 1 out of 100 000 people. By building a model that predicts all the negative cases correctry we would be able to achive a 99.999% accuracy, which sounds very impressive.
However, this could be achived with a simple model, which always predicts a negative class label.
Despite the impressive accuracy, this model would be 0% accurate in predicting the positive cases.
Therefore, especially in presence of class imbalance, care should be taken when interpreting accuracy.
:::

### True positive rate (Sensitivity/Recall)

True positive rate, also known as sensitivity or recall, is defined by looking at the row of the confusion matrix that corresponds to the positive class.
As the name implies, this tells us how sensitive our model is in regognizing the positive cases.
Using the four classes define above, we get for True Positive Rate (TPR):

$$
\text{TPR} = \frac{\text{TP}}{\text{TP} + \text{FN}}.
$$

For our example, we get:

```{python}
#| code-fold: false
59 / (59 + 13)
```

With scikit-learn we can calculate the true positive rate as follows:

```{python}
#| code-fold: false

from sklearn.metrics import recall_score

recall_score(y_test, y_pred)
```

### True negative rate (Specificity)

True Negative Rate (TNR), also known as specificity, is has a similar definition to the True Positive Rate, but it looks at the negative class.
The formula for True Negative Rate is:

$$
\text{TNR} = \frac{\text{TN}}{\text{TN} + \text{FP}}.
$$

This translates to:

```{python}
#| code-fold: false
130 / (130 + 3)
```

With scikit-learn, we are forced to rely on a kind of a workaround for calculating specificity.
There isn't a function named after it, but as we mentioned above the definition is basically identical to recall (sensitivity). The only difference is that we are focusing on the negative class label.
Therefore, we can use the `recall_score` function, but we need to specify the positive class label as 0.

```{python}
#| code-fold: false

from sklearn.metrics import recall_score

recall_score(y_test, y_pred, pos_label=0)
```

It seems that our model is better at identifying the negative cases than the positive ones.

### Positive predictive value (Precision)

The previous two metrics were defined based on the rows of the confusion matrix. Positive predictive value, also known as precision, is defined by looking at the column with the positive predictions.
We defined it as:

$$
\text{PPV} = \frac{\text{TP}}{\text{TP} + \text{FP}}.
$$

So in essence we are looking to see which proportion of our positive predictions are correct.
Let's see the precision of our logistic regression fit the manual way, and then with scikit-learn.

```{python}
#| code-fold: false

59 / (59 + 3)
```

```{python}
#| code-fold: false

# with scikit-learn
from sklearn.metrics import precision_score

precision_score(y_test, y_pred)
```

When our model does label something as positive, it is correct 95% of the time.

### Negative predictive value

Negative predictive value is the counterpart of positive predictive value. It uses the column for the negative predictions in the confusion matrix.
The formula for Negative Predictive Value (NPV) is:

$$
\text{NPV} = \frac{\text{TN}}{\text{TN} + \text{FN}}.
$$

NPV tells us which proportion of our negative predictions was correct, which for our example is:

```{python}
#| code-fold: false

130 / (130 + 13)
```

When we use scikit-learn, we need to apply the same trick we used for specificity, and that is to define the positive class label as 0.

```{python}	
#| code-fold: false

from sklearn.metrics import precision_score

precision_score(y_test, y_pred, pos_label=0)
```

So, when our model does label something as negative, it is correct 91% of the time (with the test data).

## Getting the classification report

There is actually a convenient function in scikit-learn that calculates all the metrics we went through in one go. It's called `classification_report`.
Let's see how it works.

```{python}
#| code-fold: false

from sklearn.metrics import classification_report

print(classification_report(y_test, y_pred))
```

The output is divided to columns, out of which the first two are labelled as `precision` and `recall`.
On the left-hand side we see the class labels depicted by their numeric values (0 and 1).
If we look at the results for the positive class (1), we see that the value for precision is 0.95 and for recall 0.82, which match the results we calculated manually. The row above shows the results for the negative class (0), and we can again confirm that the values correspond to the results we got for specificity and the negative predictive value (NPV). Additionally, the classification report provides a value for accuracy, as well as averages for the metrics across the classes.

Something about F1-score... which is the harmonic mean of precision and recall.

$$
F_{1} = \frac{2}{\text{precision}^{-1} + \text{recall}^{-1}}
$$

```{python}	
#| code-fold: false

f1_res = 2 / (1/0.95 + 1/0.82)

f1_res.__round__(2)
```

```{python}	
#| code-fold: false
from sklearn.metrics import f1_score

f1_score(y_test, y_pred)
```

## Multivariate logistic regression

In @sec-univariate we looked at univariate logistic regression, where a single independent variable was used to predict the dependent variable.
This yielded pretty decent results, and was also easy to interpret.