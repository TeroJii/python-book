---
jupyter: python3
fig-height: 4
---

# Seaborn for data visualisation

Seaborn is a Python data visualisation library based on Matplotlib. Seaborn makes it easy to create attractive and well-laid-out plots. Seaborn also plays nicely with Pandas data structures, which is important for data science related visualizations. We can install Seaborn easily using pip or conda:

```bash
# installation using pip
pip install seaborn
```

## Getting started

Let's start by creating a simple scatter plot using Seaborn. We start by importing Seaborn for the visualizations and Numpy and Pandas for generating and handling the data.

```{python}
#| code-fold: false
import seaborn as sns
import numpy as np
import pandas as pd
```

Next, we generate some random data and plot it using Seaborn (@fig-scatter1).

```{python}
#| code-fold: false
#| label: fig-scatter1
#| fig-cap: Scatter plot created using Seaborn.

x = np.random.normal(size=100)
y = np.random.normal(size=100)
df = pd.DataFrame({'x': x, 'y': y})

sns.scatterplot(x='x', y='y', data=df)
```

We can see right away that Seaborn's syntax differs somewhat from the one used by Matplotlib.

::: {.callout-tip}
## Seaborn Documentation

The Seaborn website contains something called the `API reference`, which is a comprehensive guide to the functions and classes in Seaborn. It is a great resource to learn more about the details regarding Seaborn and how to use it effectively. You can find it at <https://seaborn.pydata.org/api.html>.
:::

## Evaluating distributions

Seaborn offers many convenient plotting functions for evaluating distributions. Let's explore the `penguins` dataset that comes with Seaborn. The `penguins` dataset contains data on the size and species of penguins collected from different islands in the Palmer Archipelago, Antarctica. We can load the dataset using the following code:

```{python}
#| code-fold: false
#| label: tbl-penguins
#| tbl-cap: The first few rows of the penguins dataset.

penguins = sns.load_dataset('penguins').dropna()

penguins.head()
```

@tbl-penguins-desc shows a summary of the dataset.

```{python}
#| code-fold: false
#| label: tbl-penguins-desc
#| tbl-cap: Summary statistics for the penguins dataset.

penguins.describe()
```

### Pairplot

The `pairplot()` function creates a grid of scatterplots for all pairs of numerical columns in a DataFrame. Additionally, it show's an estimate of the distribution of each column along the diagonal. It is simple yet effective way to get an overview of your data, provided the data doesn't entail a huge number of numeric columns. @fig-pairplot shows an example for the `penguins` dataset.

```{python}
#| code-fold: false
#| label: fig-pairplot
#| fig-cap: Pairplot of the penguins dataset.
#| warning: false

pen_plt = sns.pairplot(penguins, hue='island')
pen_plt.fig.set_size_inches(7,7)
```

Above we used the `hue` parameter to color the points based on the island where the penguins were observed. This makes it easier to see if there are any differences between the islands. We can set the `hue` parameter to any categorical column in the dataset. 

### Displot & Histogram

The `displot()` function creates a histogram and a kernel density estimate of the data. It is a convenient way to evaluate the distribution of a single variable. @fig-distplot shows an example for the `penguins` dataset.

```{python}
#| code-fold: false
#| label: fig-distplot
#| fig-cap: Distribution plot of the penguin's flipper length.
#| warning: false

sns.displot(penguins['flipper_length_mm'], kde=True)
```

If we are simply looking to create a histogram, we can use the `histplot()` function. @fig-histplot shows an example for the `penguins` dataset.

```{python}
#| code-fold: false
#| label: fig-histplot
#| fig-cap: Histogram of the penguin's flipper length.
#| warning: false

sns.histplot(penguins['flipper_length_mm'], bins=20)
```

Here we used the `bins` parameter to set the number of bins in the histogram. There are many other parameters that can be used to customize the plot, including but not limited to:

- `binwidth`: Width of each bin
- `fill`: Whether to fill the bars with color.

### Boxplot

Boxplot is convenient for visualizing the distribution of a numerical variable across different categories. The `boxplot()` function creates a boxplot of the data. @fig-boxplot shows an example for the `penguins` dataset.

```{python}
#| code-fold: false
#| label: fig-boxplot
#| fig-cap: Boxplot of the penguin's flipper length. The box shows the positions of the first, second (median), and third quartiles. The whiskers extend to the most extreme data points not considered outliers (according to normal distribution), and the outliers are plotted as individual points.

sns.boxplot(x='species', y='flipper_length_mm', data=penguins)
```

### Jointplot

The `jointplot()` function creates a scatter plot of two numerical variables along with the histograms of each variable. It is a convenient way to visualize the relationship between two variables. @fig-jointplot shows an example with the flipper length and body mass.

```{python}
#| code-fold: false
#| label: fig-jointplot
#| fig-cap: Jointplot showing the correlation between penguin flipper length and body mass.
#| warning: false

sns.jointplot(x='flipper_length_mm', y='body_mass_g', 
data=penguins, kind='reg')
```

The `kind` parameter is very useful, as it allows us to choose the type of plot to display in the jointplot. For example, if we have a lot of points we can use `kind='hex'` to create a hexbin plot. @fig-jointplot-hex shows an example.

```{python}
#| code-fold: false
#| label: fig-jointplot-hex
#| fig-cap: Jointplot showing the correlation between penguin flipper length and body mass using a hexbin plot. The number of observations within each hexagon is represented by the color intensity.
#| warning: false

sns.jointplot(x='flipper_length_mm', y='body_mass_g',
data=penguins, kind='hex')
```
