---
jupyter: python3
fig-height: 4
---

# Seaborn for data visualisation

Seaborn is a Python data visualisation library based on Matplotlib. Seaborn makes it easy to create attractive and well-laid-out plots. Seaborn also plays nicely with Pandas data structures, which is important for data science related visualizations. We can install Seaborn easily using pip or conda:

```bash
# installation using pip
pip install seaborn
```

## Getting started

Let's start by creating a simple scatter plot using Seaborn. We start by importing Seaborn for the visualizations and Numpy and Pandas for generating and handling the data.

```{python}
#| code-fold: false
import seaborn as sns
import numpy as np
import pandas as pd
```

Next, we generate some random data and plot it using Seaborn (@fig-scatter1).

```{python}
#| code-fold: false
#| label: fig-scatter1
#| fig-cap: Scatter plot created using Seaborn.

x = np.random.normal(size=100)
y = np.random.normal(size=100)
df = pd.DataFrame({'x': x, 'y': y})

sns.scatterplot(x='x', y='y', data=df)
```

We can see right away that Seaborn's syntax differs somewhat from the one used by Matplotlib.

::: {.callout-tip}
## Seaborn Documentation

The Seaborn website contains something called the `API reference`, which is a comprehensive guide to the functions and classes in Seaborn. It is a great resource to learn more about the details regarding Seaborn and how to use it effectively. You can find it at <https://seaborn.pydata.org/api.html>.
:::

## Evaluating distributions

Seaborn offers many convenient plotting functions for evaluating distributions. Let's explore the `penguins` dataset that comes with Seaborn. The `penguins` dataset contains data on the size and species of penguins collected from different islands in the Palmer Archipelago, Antarctica. We can load the dataset using the following code:

```{python}
#| code-fold: false
#| label: tbl-penguins
#| tbl-cap: The first few rows of the penguins dataset.

penguins = sns.load_dataset('penguins').dropna()

penguins.head()
```

@tbl-penguins-desc shows a summary of the dataset.

```{python}
#| code-fold: false
#| label: tbl-penguins-desc
#| tbl-cap: Summary statistics for the penguins dataset.

penguins.describe()
```

### Pairplot

The `pairplot()` function creates a grid of scatterplots for all pairs of numerical columns in a DataFrame. Additionally, it show's an estimate of the distribution of each column along the diagonal. It is simple yet effective way to get an overview of your data, provided the data doesn't entail a huge number of numeric columns. @fig-pairplot shows an example for the `penguins` dataset.

```{python}
#| code-fold: false
#| label: fig-pairplot
#| fig-cap: Pairplot of the penguins dataset.
#| warning: false

pen_plt = sns.pairplot(penguins, hue='island')
pen_plt.fig.set_size_inches(7,7)
```

Above we used the `hue` parameter to color the points based on the island where the penguins were observed. This makes it easier to see if there are any differences between the islands. We can set the `hue` parameter to any categorical column in the dataset. 

### Displot & Histogram

The `displot()` function creates a histogram and a kernel density estimate of the data. It is a convenient way to evaluate the distribution of a single variable. @fig-distplot shows an example for the `penguins` dataset.

```{python}
#| code-fold: false
#| label: fig-distplot
#| fig-cap: Distribution plot of the penguin's flipper length.
#| warning: false

sns.displot(penguins['flipper_length_mm'], kde=True)
```

If we are simply looking to create a histogram, we can use the `histplot()` function. @fig-histplot shows an example for the `penguins` dataset.

```{python}
#| code-fold: false
#| label: fig-histplot
#| fig-cap: Histogram of the penguin's flipper length.
#| warning: false

sns.histplot(penguins['flipper_length_mm'], bins=20)
```

Here we used the `bins` parameter to set the number of bins in the histogram. There are many other parameters that can be used to customize the plot, including but not limited to:

- `binwidth`: Width of each bin
- `fill`: Whether to fill the bars with color.

### Boxplot

Boxplot is convenient for visualizing the distribution of a numerical variable across different categories. The `boxplot()` function creates a boxplot of the data. @fig-boxplot shows an example for the `penguins` dataset.

```{python}
#| code-fold: false
#| label: fig-boxplot
#| fig-cap: Boxplot of the penguin's flipper length. The box shows the positions of the first, second (median), and third quartiles. The whiskers extend to the most extreme data points not considered outliers (according to normal distribution), and the outliers are plotted as individual points.

sns.boxplot(x='species', y='flipper_length_mm', data=penguins)
```

### Jointplot

The `jointplot()` function creates a scatter plot of two numerical variables along with the histograms of each variable. It is a convenient way to visualize the relationship between two variables. @fig-jointplot shows an example with the flipper length and body mass.

```{python}
#| code-fold: false
#| label: fig-jointplot
#| fig-cap: Jointplot showing the correlation between penguin flipper length and body mass.
#| warning: false

sns.jointplot(x='flipper_length_mm', y='body_mass_g', 
data=penguins, kind='reg')
```

The `kind` parameter is very useful, as it allows us to choose the type of plot to display in the jointplot. For example, if we have a lot of points we can use `kind='hex'` to create a hexbin plot. @fig-jointplot-hex shows an example.

```{python}
#| code-fold: false
#| label: fig-jointplot-hex
#| fig-cap: Jointplot showing the correlation between penguin flipper length and body mass using a hexbin plot. The number of observations within each hexagon is represented by the color intensity.
#| warning: false

sns.jointplot(x='flipper_length_mm', y='body_mass_g',
data=penguins, kind='hex')
```

## Comparing groups

A common task in data analysis is to compare different groups within data. For example, in the `penguins` dataset we might want to compare the body mass of the different species. One way to do this is to create a barplot, as we have done in @fig-barplot.

```{python}	
#| code-fold: false
#| label: fig-barplot
#| fig-cap: Barplot showing the average body mass of the different penguin species.

sns.barplot(x='species', y='body_mass_g', data=penguins)
```

By default, the barplot shows the average value of the `y` variable for each category in the `x` variable. The `barplot` function has a parameter for adjusting which estimator is used in comparing the group. We change the estimator to *e.g.* `median` quite easily with the help of numpy as shown in @fig-barplot-median.

```{python}
#| code-fold: false
#| label: fig-barplot-median
#| fig-cap: Barplot showing the median body mass of the different penguin species.
import matplotlib.pyplot as plt

plot = sns.barplot(x='species', y='body_mass_g', data=penguins, estimator=np.median)
# re-label y-axis
plot.set_ylabel('Median body mass (g)')

plt.show()
```

### Countplot

If the bars in the barplot are used for counting the number of observations, we can use the `countplot()` function in Seaborn. @fig-countplot shows an example of this on the number of different species in the `penguins` dataset. This is a great way of assessing if the dataset is balanced or not.

```{python}
#| code-fold: false
#| label: fig-countplot
#| fig-cap: Countplot showing the number of penguin observations per species in the data.

sns.countplot(x='species', data=penguins)
```

### Digging deeper with the hue parameter

As we saw above, the `countplot` and `barplot` functions are effective tools for comparing groups within a dataset. The `hue` parameter allows us to add an extra layer of granularity to the plot. For example, we can use the `hue` parameter to compare the bill lenght of the different species of penguins and see the effect of sex of the penguin. @fig-barplot-hue shows an example of this.

```{python}
#| code-fold: false
#| label: fig-barplot-hue
#| fig-cap: Barplot showing the average bill length of the different penguin species. The bars are colored according to sex.

sns.barplot(x='species', y='bill_length_mm', hue='sex', data=penguins)
```

Using the `hue` parameter is very useful also with plot types like `boxplot` and `violinplot`, which display distributions. @fig-boxplot-hue shows an example of a boxplot with the `hue` parameter.

```{python}
#| code-fold: false
#| label: fig-boxplot-hue
#| fig-cap: Boxplot showing the flipper length of the different penguin species. The boxes are colored according to sex.

sns.boxplot(x='species', y='flipper_length_mm', hue='sex', data=penguins)
```

## Faceting

In the previous section we saw how to utilize the `hue` parameter in separating data based on a grouping variable. Another useful technique for visualizing grouped data is faceting. We can use the `FacetGrid` class to create a separate histogram for each species in the `penguins` dataset. @fig-facetgrid shows an example of this.

```{python}
#| code-fold: false
#| label: fig-facetgrid
#| fig-cap: FacetGrid showing the distribution of flipper length for each penguin species. By setting the `species` column as the `col` parameter value, separate plots for each species are created into their respective columns.
#| warning: false

g = sns.FacetGrid(penguins, col='species')
facet_plot1 = g.map(sns.histplot, 'flipper_length_mm')
facet_plot1.fig.set_size_inches(w=7, h=3)
```

We can also use the `row` parameter to facet the plots into rows. This is especially useful when we have two categorical columns we want to group by. @fig-facetgrid-row shows data grouped by the `species` and `sex` variables.

```{python}
#| code-fold: false
#| label: fig-facetgrid-row
#| fig-cap: FacetGrid showing the correlation of bill length and bill depth for each penguin species. The plots are faceted into rows based on sex.

# modify the sex column to show F for Female and M for Male
penguins['sex'] = penguins['sex'].apply(lambda x: 'F' if x == 'Female' else 'M')

g = sns.FacetGrid(penguins, row='sex', col='species')
g.map(sns.scatterplot, 'bill_length_mm', 'bill_depth_mm')
g.figure.set_size_inches(w=7, h=6)
```

### More complex Grids

`FacetGrid` is not the only way to create a grid of plots in Seaborn. The `pairplot` function we saw earlier is another example of a grid of plots. In fact `pairplot` is just a specialized version of a more general function called `PairGrid`. We can use `PairGrid` to create a grid of plots for any pair of variables in the dataset, and we can also specify which type of plots we want on different parts of the grid. @fig-pairgrid shows an example of this.

```{python}
#| code-fold: false
#| label: fig-pairgrid
#| fig-cap: PairGrid showing the pairwise relations of all numeric variables in the penguins dataset.

g = sns.PairGrid(penguins, hue='species')
# set the upper triangle to scatterplot
g.map_upper(sns.scatterplot)
# set the lower triangle to kdeplot
g.map_lower(sns.kdeplot)
# set the diagonal to histplot
g.map_diag(sns.histplot)
g.add_legend()
sns.move_legend(g, "lower center",
    bbox_to_anchor=(.5, 1), ncol=3, title=None, frameon=False
    )

# set figure size
g.figure.set_size_inches(w=6, h=6)
```

## Visualizing Correlation

Correlation can be roughly described as a measure of the strength and direction of a linear relationship between two numerical variables. For example, for the numeric columns in the `penguins` dataset, we can calculate the correlation matrix using the `corr()` function. @tbl-pen-corr shows the correlation matrix for the `penguins` dataset.

```{python}
#| code-fold: false
#| label: tbl-pen-corr
#| tbl-cap: A matrix showing the Pearson correlation between the numerical columns in the penguins dataset.

pen_corr = penguins.corr(numeric_only=True)
pen_corr
```

Once we have our data in this rectangular form, we can use the `heatmap()` function, which offers a convenient way to visualize the correlation. The `heatmap()` function creates a color-coded matrix that shows the correlation between each pair of variables. @fig-heatmap shows an example of this for the correlation data we created above.

```{python}
#| code-fold: false
#| label: fig-heatmap
#| fig-cap: Heatmap showing the correlation between numerical variables in the penguins dataset. Color intensity is used to visualize the correlation values.

sns.heatmap(pen_corr, annot=True)
```

The `annot` parameter is used to display the numeric correlation values in the heatmap. Moreover, `cmap` parameter can be used to change the color map of the heatmap.

### Heatmap for temporal data

Heatmaps can also be used to visualize temporal data. @tbl-finnish-weather shows monthly weather data from the website [Our World in Data](https://ourworldindata.org/grapher/monthly-average-surface-temperatures-by-year).

```{python}
#| code-fold: false
#| label: tbl-finnish-weather
#| tbl-cap: The finnish weather dataset from Our World in Data.

weather = pd.read_csv('data/monthly-average-surface-temperatures-by-year.csv')
weather
```

We can see that the dataset contains the average temperature for each month in Finland from 1950 to 2024. We can use the `heatmap()` function to visualize this data. When we look at the data in @tbl-finnish-weather we notice that the months are actually listed under the `Year` column, while the years themselves are listed with numeric column names. First thing to do, is to move the `Year` column as the index and remove the `Entity` and `Code` columns. Finally, we shall transpose the data, so that the months will be displayed on the x-axis of the resulting heatmap (@fig-heatmap-weather).

```{python}
#| code-fold: false
#| label: fig-heatmap-weather
#| fig-cap: Heatmap showing the average temperature in Finland for each month from January of 1950 until August of 2024. Color intensity is used to visualize the temperature values.

weather = weather.set_index('Year').drop(columns=['Entity', 'Code'])
# rename index to month
weather.index.name = 'Month'
# transpose the data
weather = weather.T
sns.heatmap(weather, cmap='coolwarm')
```

## Visualizing Regression

Seaborn is designed for statistical data visualization. With this in mind, it is not that surprizing to hear that Seaborn offers many convenient ways to visualize regression models. The `lmplot()` and the `regplot()` functions are the two function offered by Seaborn to visualize a linear fit. You can refer to the Seaborn documentation about the differences between the two functions, but briefly the `lmplot()` function requires the data argument to be passed, whereas `regplot()` can be used for plotting e.g. two numpy arrays. @fig-lmplot shows an example of the `lmplot()` function with the `penguins` dataset, and @fig-regplot shows an example of the `regplot()` function with two numpy arrays.

```{python}
#| code-fold: false
#| label: fig-lmplot
#| fig-cap: The linear relationship between flipper length and body mass of penguins

sns.lmplot(x='flipper_length_mm', y='body_mass_g', data=penguins)
```

```{python}
#| code-fold: false
#| label: fig-regplot
#| fig-cap: The relationship between two random numpy arrays.

# regplot example for numpy arrays
sns.regplot(x=np.random.normal(size=10), y=np.random.normal(size=10))
```