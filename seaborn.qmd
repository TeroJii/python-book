---
jupyter: python3
fig-height: 4
---

# Seaborn for data visualisation

Seaborn is a Python data visualisation library based on Matplotlib. Seaborn makes it easy to create attractive and well-laid-out plots. Seaborn also plays nicely with Pandas data structures, which is important for data science related visualizations. We can install Seaborn easily using pip or conda:

```bash
# installation using pip
pip install seaborn
```

## Getting started

Let's start by creating a simple scatter plot using Seaborn. We start by importing Seaborn for the visualizations and Numpy and Pandas for generating and handling the data.

```{python}
#| code-fold: false
import seaborn as sns
import numpy as np
import pandas as pd
```

Next, we generate some random data and plot it using Seaborn (@fig-scatter1).

```{python}
#| code-fold: false
#| label: fig-scatter1
#| fig-cap: Scatter plot created using Seaborn.

x = np.random.normal(size=100)
y = np.random.normal(size=100)
df = pd.DataFrame({'x': x, 'y': y})

sns.scatterplot(x='x', y='y', data=df)
```

We can see right away that Seaborn's syntax differs somewhat from the one used by Matplotlib.

::: {.callout-tip}
## Seaborn Documentation

The Seaborn website contains something called the `API reference`, which is a comprehensive guide to the functions and classes in Seaborn. It is a great resource to learn more about the details regarding Seaborn and how to use it effectively. You can find it at <https://seaborn.pydata.org/api.html>.
:::

## Evaluating distributions

Seaborn offers many convenient plotting functions for evaluating distributions. Let's explore the `penguins` dataset that comes with Seaborn. The `penguins` dataset contains data on the size and species of penguins collected from different islands in the Palmer Archipelago, Antarctica. We can load the dataset using the following code:

```{python}
#| code-fold: false
#| label: tbl-penguins
#| tbl-cap: The first few rows of the penguins dataset.

penguins = sns.load_dataset('penguins').dropna()

penguins.head()
```

### Pairplot

The `pairplot()` function creates a grid of scatterplots for all pairs of numerical columns in a DataFrame. It is simple yet effective way to get an overview of your data, provided the data doesn't entail a huge number of numeric columns. @fig-pairplot shows an example for the `penguins` dataset.

```{python}
#| code-fold: false
#| label: fig-pairplot
#| fig-cap: Pairplot of the penguins dataset.
#| warning: false

pen_plt = sns.pairplot(penguins, hue='island')
pen_plt.fig.set_size_inches(7,7)
```
