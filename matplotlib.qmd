---
jupyter: python3
---

# Data visualisation with Matplotlib

Matplotlib is a comprehensive plotting library for Python. It can be used to create a wide variety of plots, including line plots, bar plots, histograms, scatter plots, and much more. Matplotlib is highly customizable and allows you to create publication-quality plots. Matplotlib can be installed using pip or conda:

```bash
# installation using pip
pip install matplotlib
```

## Getting started

Let's start by creating a simple line plot using Matplotlib. The following code generates data along a sine wave and plots it using Matplotlib. We start by importing the necessary libraries.

```{python}
#| code-fold: false
import matplotlib.pyplot as plt
import numpy as np
```

Next, we generate the data and plot it using Matplotlib (@fig-sine1).

```{python}
#| code-fold: false
#| label: fig-sine1
#| fig-cap: Sine wave plot created using Matplotlib.

x = np.linspace(0, 10, 100)
y = np.sin(x)
plt.plot(x, y)
plt.show()
```

The `plt.plot()` function is used to create the plot, and the `plt.show()` function is used to display the plot. The `x` and `y` arrays contain the data for the x-axis and y-axis, respectively. Essentially, we were able to create a decent looking plot with just four lines of code.

Let's customize the plot a bit by adding labels to the x-axis and y-axis, a title, and a grid.

```{python}
#| code-fold: false
#| label: fig-sine2
#| fig-cap: Sine wave plot with axis labels, title, and grid.

plt.plot(x, y)
plt.xlabel('x axis')
plt.ylabel('y axis')
plt.title('Sine wave plot')
plt.grid(True)
plt.show()
```

### The second way of creating a plot

What makes Matplotlib a bit tricky for beginners is that it has two interfaces: and explicit and implicit one. The one we saw above is the implicit interface, which resembles MATLAB, and makes it easier to create simple plots. The explicit interface is more powerful and flexible, but it requires more lines of code. Let's see how we can create the same plot using the Object Oriented (OO) explicit interface.

```{python}
#| code-fold: false
#| label: fig-sine3
#| fig-cap: Sine wave plot using the Object Oriented (OO) explicit interface.

fig, ax = plt.subplots()
ax.plot(x, y)
plt.show()
```

In the second approach, we first create a figure and an axis object using `plt.subplots()`. We then use the `plot()` method of the axis object to create the plot. In a simple case like this one, the difference between the two interfaces isn't too big.

Let's add the missing labels, title, and grid to the plot.

```{python}
#| code-fold: false

fig, ax = plt.subplots()
ax.plot(x, y)
ax.set_xlabel('x axis')
ax.set_ylabel('y axis')
ax.set_title('Sine wave plot')
ax.grid(True)
plt.show()
```

