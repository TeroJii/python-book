---
jupyter: python3
---

# Data visualisation with Matplotlib

Matplotlib is a comprehensive plotting library for Python. It can be used to create a wide variety of plots, including line plots, bar plots, histograms, scatter plots, and much more. Matplotlib is highly customizable and allows you to create publication-quality plots. Matplotlib can be installed using pip or conda:

```bash
# installation using pip
pip install matplotlib
```

## Getting started

Let's start by creating a simple line plot using Matplotlib. The following code generates data along a sine wave and plots it using Matplotlib. We start by importing the necessary libraries.

```{python}
#| code-fold: false
import matplotlib.pyplot as plt
import numpy as np
```

Next, we generate the data and plot it using Matplotlib (@fig-sine1).

```{python}
#| code-fold: false
#| label: fig-sine1
#| fig-cap: Sine wave plot created using Matplotlib.

x = np.linspace(0, 10, 100)
y = np.sin(x)
plt.plot(x, y)
plt.show()
```

The `plt.plot()` function is used to create the plot, and the `plt.show()` function is used to display the plot. The `x` and `y` arrays contain the data for the x-axis and y-axis, respectively. Essentially, we were able to create a decent looking plot with just four lines of code.

Let's customize the plot a bit by adding labels to the x-axis and y-axis, a title, and a grid.

```{python}
#| code-fold: false
#| label: fig-sine2
#| fig-cap: Sine wave plot with axis labels, title, and grid.

plt.plot(x, y)
plt.xlabel('x axis')
plt.ylabel('y axis')
plt.title('Sine wave plot')
plt.grid(True)
plt.show()
```

### The second way of creating a plot

What makes Matplotlib a bit tricky for beginners is that it has two interfaces: and explicit and implicit one. The one we saw above is the implicit interface, which resembles MATLAB, and makes it easier to create simple plots. The explicit interface is more powerful and flexible, but it requires more lines of code. Let's see how we can create the same plot using the Object Oriented (OO) explicit interface.

```{python}
#| code-fold: false
#| label: fig-sine3
#| fig-cap: Sine wave plot using the Object Oriented (OO) explicit interface.

fig, ax = plt.subplots()
ax.plot(x, y)
plt.show()
```

In the second approach, we first create a figure and an axis object using `plt.subplots()`. We then use the `plot()` method of the axis object to create the plot. In a simple case like this one, the difference between the two interfaces isn't too big.

Let's add the missing labels, title, and grid to the plot.

```{python}
#| code-fold: false
#| label: fig-sine4
#| fig-cap: Sine wave plot using the Object Oriented (OO) explicit interface with axis labels, title, and grid.

fig, ax = plt.subplots()
ax.plot(x, y)
ax.set_xlabel('x axis')
ax.set_ylabel('y axis')
ax.set_title('Sine wave plot')
ax.grid(True)
plt.show()
```

Now we have a plot that is identical to the one we created earlier. It's fine to use either of the two approaches, but the latter (object oriented) is recommended by the Matplotlib developers (especially for more elaborate plots).

## Plotting Pandas data

Matplotlib can be used to plot data stored in Pandas data structures. Let's create a simple line plot using a Pandas DataFrame. We start by importing the necessary libraries and the iris dataset (@tbl-iris).

```{python}
#| code-fold: false
#| label: tbl-iris
#| tbl-cap: The first few rows of the iris dataset.
import pandas as pd
import seaborn as sns

# Load the dataset
df = sns.load_dataset('iris')
df.head()
```

Let's start by creating a simple scatter plot using the iris dataset. We will plot the sepal length against the sepal width.

```{python}
#| code-fold: false
#| label: fig-iris1
#| fig-cap: Scatter plot of sepal length vs sepal width using the iris dataset.

fig, ax = plt.subplots()
ax.scatter(df['sepal_length'], df['sepal_width'])
ax.set_xlabel('Sepal length')
ax.set_ylabel('Sepal width')
ax.set_title('Sepal length vs Sepal width')
plt.show()
```

The `scatter()` method is used to create a scatter plot. We pass the sepal length and sepal width columns from the iris dataset to the `scatter()` method. We then add labels to the x-axis and y-axis, a title, and display the plot. 

Now, we can make the plot more informative by coloring the points based on the species of the iris flower.

```{python}
#| code-fold: false
#| label: fig-iris2
#| fig-cap: Scatter plot of sepal length vs sepal width using the iris dataset colored by species.

fig, ax = plt.subplots()
species = df['species'].unique()

for sp in species:
    x = df[df['species'] == sp]['sepal_length']
    y = df[df['species'] == sp]['sepal_width']
    ax.scatter(x, y, label=sp)

ax.set_xlabel('Sepal length')
ax.set_ylabel('Sepal width')
ax.set_title('Sepal length vs Sepal width')
ax.legend()
plt.show()
```

Above, we loop through the unique species in the dataset and create a scatter plot for each species. We then add a legend to the plot to indicate which species each color corresponds to.

We might also want to choose different shapes for the points based on the species of the iris flower. This is not much different from coloring the points based on the species (@fig-iris3).

```{python}
#| code-fold: false
#| label: fig-iris3
#| fig-cap: Scatter plot of sepal length vs sepal width using the iris dataset colored by species and different markers.

fig, ax = plt.subplots()
species = df['species'].unique()
markers = ['o', 's', '^']

for sp, marker in zip(species, markers):
    x = df[df['species'] == sp]['sepal_length']
    y = df[df['species'] == sp]['sepal_width']
    ax.scatter(x, y, label=sp, marker=marker)

ax.set_xlabel('Sepal length')
ax.set_ylabel('Sepal width')
ax.set_title('Sepal length vs Sepal width')
ax.legend()
plt.show()
```

The difference here is that we pass a list of markers to the `scatter()` method. The `zip()` function is used to iterate over two lists simultaneously.

### Several subplots

Subplots can actually be used for displaying multiple plots in the same figure. Let's create a figure with two subplots: one for the sepal length vs sepal width and another for the petal length vs petal width (@fig-subplots1).

```{python}
#| code-fold: false
#| label: fig-subplots1
#| fig-cap: Scatter plots of sepal length vs sepal width and petal length vs petal width using the iris dataset.

fig, ax = plt.subplots(1, 2, figsize=(6, 3))

# Plot 1
species = df['species'].unique()
markers = ['o', 's', '^']

for sp, marker in zip(species, markers):
    x = df[df['species'] == sp]['sepal_length']
    y = df[df['species'] == sp]['sepal_width']
    ax[0].scatter(x, y, label=sp, marker=marker)

ax[0].set_xlabel('Sepal length')
ax[0].set_ylabel('Sepal width')
ax[0].set_title('Sepal length vs Sepal width')
ax[0].legend()

plt.tight_layout()

# Plot 2
species = df['species'].unique()

for sp, marker in zip(species, markers):
    x = df[df['species'] == sp]['petal_length']
    y = df[df['species'] == sp]['petal_width']
    ax[1].scatter(x, y, label=sp, marker=marker)

ax[1].set_xlabel('Petal length')
ax[1].set_ylabel('Petal width')
ax[1].set_title('Petal length vs Petal width')
ax[1].legend()

plt.tight_layout()
plt.show()
```
