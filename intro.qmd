---
jupyter: python3
---

# Introduction

Python is an object-oriented, easy-to-use, high-level, general-purpose programming language. There is a popular saying in the programming community along the lines of:

> Python is the second best language for everything.

which is a testament on how versatile the language really is. Let's take a look at some of the basics of the language before diving in deeper.

## Basic Data Types

Numbers, strings and booleans are some of the most basic data types found in Python. Let's quickly go through some basic operations that can be performed on these data types.

### Working with numbers

Numbers can be categorized into integers and floats, depending on the use of a decimal point. Both can be used for performing basic arithmetics as shown below:

```{python}
#| code-fold: false
1 + 1
```

```{python}	
#| code-fold: false
1.0 + 2.5
```

This as such is not super useful. However, we can assign numbers (as well as other data types) into variables, which will help us store and manipulate data:

```{python}
#| code-fold: false
my_iq = 259

print(my_iq)
```

When we input large numbers, we can use underscores to make them more readable:

```{python}
#| code-fold: false

number_of_people_reading_this_book = 1_000_000

number_of_people_reading_this_book
```

Basic arithmetic operations can be performed on numbers using the following syntax:

```{python}
#| code-fold: false

a = 10
b = 3

# addition
a + b
```

```{python}
#| code-fold: false

# subtraction
a - b
```

```{python}
#| code-fold: false

# multiplication
a * b
```

```{python}
#| code-fold: false

# division
a / b
```

```{python}
#| code-fold: false

# floor division
a // b
```

```{python}
#| code-fold: false

# modulo
a % b
```

```{python}
#| code-fold: false

# exponentiation
a ** b
```

:::{.callout-caution}
When working with floating point numbers, we might encounter some precision issues stemming from the way computers store numbers. For example, you would expect the following code to return `0.0`, but it doesn't due to the aforementioned limitations:

```{python}
#| code-fold: false
1 - 0.7 - 0.3
```

This is usually not a problem, but it's good to keep in mind nevertheless.
:::


### Strings

Strings are used to represent text data. They can be enclosed in either single `'` or double `"` quotes.
Some basic operations on strings include concatenation and repetition:

```{python}
#| code-fold: false
"Hello" + " " + "World"
```

```{python}
#| code-fold: false
"Hello" * 3
```

Strings can also be indexed and sliced:

```{python}
#| code-fold: false
my_string = "Hello World"

# indexing
print(my_string[0])
```

```{python}
#| code-fold: false
# slicing
print(my_string[0:5])
```

Sometimes we might have to convert numbers to strings and vice versa. This can be done using the `str()` and `int()` functions:

```{python}
#| code-fold: false

# converting a number to a string
str(123)
```

```{python}	
#| code-fold: false

string_disguised_as_number = '123'

# converting a string to a number
int(string_disguised_as_number)
```

In case of floats, we can use the `float()` function:

```{python}
#| code-fold: false

# converting a string to a float
float('3.14')
```

If you need to create a string which spans multiple lines, you can use triple quotes to do so:
```{python}	
#| code-fold: false
multiline_string ="""
This is a string
that spans multiple
lines
"""
print(multiline_string)
```

The three quotation marks are basically just a shorthand for creating a string with newline characters in it, as we can see if we print out the string variable:

```{python}
#| code-fold: false
multiline_string
```

Sometimes it is useful to format strings in a certain way. This can be done using the `format()` method:

```{python}
#| code-fold: false

name = "John"
age = 25
formatted_string = "My name is {} and I am {} years old".format(name, age)

print(formatted_string)
```	

There are other intricacies related to working with strings, such as the `split()` and `join()` methods, which we will cover in a later section... maybe.

### Booleans

Booleans are used to represent truth values, namely `True` and `False`. They can be used in conjunction with logical operators such as `and`, `or` and `not`:

```{python}
#| code-fold: false
True and False
```

Booleans are most commonly used in conditional statements, which we will cover in a later section.

## Other data types

Python has a number of built-in data structures that can be used to store collections of data. Some of the most commonly used ones are lists, tuples, sets and dictionaries.

### Lists

Lists are used to store collections of items. They are ordered, mutable and can contain items of different types. Lists are defined using square brackets `[]`:

```{python}
#| code-fold: false

my_list = [1, 'two', True, False, 5]

print(my_list)
```

You can access elements in a list using their index. Just remember that Python uses zero-based indexing:

```{python}
#| code-fold: false

# get second element
my_list[1]
```

You can also slice lists, i.e. get a subset of the list using the following syntax:

```{python}
#| code-fold: false

# get first three elements
my_list[:3]
```

A list can also contain nested lists:

```{python}
#| code-fold: false

nested_list = [[1, 2, 3], [4, 5, 6], [7, 8, 9]]

print(nested_list)
```

Accessing the elements of a nested list is done by chaining the index operators:

```{python}
#| code-fold: false

nested_list[1][2]
```

This can be tricky at times. Consider yourself warned.

Adding new elements to a list can be done using the `append()` method:

```{python}
#| code-fold: false

my_list.append('New element')

print(my_list)
```

We can return the last element from a list using the `pop()` method:

```{python}
#| code-fold: false

my_list.pop()
```

This will also remove it from the list as we can see by inspecting the list again:

```{python}
#| code-fold: false

print(my_list)
```

If we want to remove a specific element from our list, we can do so by using the `remove()` method:

```{python}
#| code-fold: false

my_list.remove('two')

print(my_list)
```

### Tuples

Tuples are kind of like lists, but they are immutable, which is a fancy way of saying that once they are created, their size and contents cannot be changed. Tuples are defined using parentheses `()`:

```{python}
#| code-fold: false

# creating a tuple
my_tuple = (1, 'two', True, False, 5)

my_tuple
```

You can access elements in a tuple using their index, just like with lists:

```{python}
#| code-fold: false

# get second element
my_tuple[1]
```

Why would you then create a tuple instead of a list? Well, tuples are faster than lists, and I guess sometimes you want to make sure that the data you are working with doesn't change to name a few reasons.

### Sets

Sets are kind of like lists or tuples, but they are unordered and do not allow duplicate elements. Sets are defined using curly braces `{}`:

```{python}
#| code-fold: false
my_set = {1, 2, 3}

my_set
```

Sets are mutable, so you can add and remove elements from them. They are also useful for performing set operations such as union, intersection, difference and symmetric difference:

```{python}
#| code-fold: false

set1 = {1, 2, 3}
set2 = {3, 4, 5}

# union
set1 | set2
```

```{python}
#| code-fold: false

# intersection
set1 & set2
```

```{python}
#| code-fold: false

# difference

set1 - set2
```

```{python}
#| code-fold: false

# symmetric difference
set1 ^ set2
```

### Dictionaries