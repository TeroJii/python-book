---
jupyter: python3
---

# NumPy

So far we have only used commands that come with the standard Python distribution. However, Python is a very popular language for scientific computing and there are many packages that can be used to extend its capabilities. One of the most fundamental packages for extending Pythons capabilities in this domain is NumPy. NumPy is also the cornerstone for many packages which are important for doing data analysis with Python, including but not limited to Pandas, SciPy, and Matplotlib.

## Installation and Loading

You can install Python packages using the `pip` command. Another popular package manager is `conda`. Either of these package managers will do the trick.

:::{.callout-tip}
Installing NumPy using pip in rather simple. Just run the following command in your terminal or command prompt:

```bash
pip install numpy
```	
:::

Once you have installed the NumPy package, you can load it using the following command.

```{python}
#| code-fold: false
import numpy as np
```

We have imported the NumPy package and aliased it as `np`. This is a common convention when working with NumPy. We can now use the functions and classes provided by NumPy by prefixing them with `np.`. For example, generating a random number using NumPy would look like this:

```{python}
#| code-fold: false
np.random.rand(5)
```

## What can NumPy do?

One of the key concepts in NumPy are array and matrix data structures. Moreover, Numpy provides tools for working with these structures. The array is in principle quite similar to a list in Python, with a few key differences:

* Arrays can be multidimensional
* Arrays can only contain elements of the same type, whereas lists can contain elements of different types
* Arrays are optimized for numerical operations, whereas lists are not. This makes arrays much faster for numerical operations than lists, and also more memory efficient.

## NumPy Arrays

### 1-D Vectors

You can create a 1-D NumPy array from a list using the `np.array()` function. For example:

```{python}
#| code-fold: false
a = np.array([1, 2, 3, 4, 5])
a
```

You might have noticed that we actually used a list to create the NumPy array. We can naturally create a NumPy array from a list which has been assigned to a variable. For example, below we will cast a list to an array using the variable `my_list`:

```{python}
#| code-fold: false

my_list = [1, 2, 3, 4, 5]
a = np.array(my_list)
print(a)
```

We can also create a NumPy array for a range of numbers conveniently using the `np.arange()` function.

```{python}
#| code-fold: false
a = np.arange(1, 6)
print(a)
```

You can also determine a step size for the range of numbers. For example, the following code will create an array with numbers from 0 to 10 with a step size of 2.

```{python}
#| code-fold: false
a_steps = np.arange(0, 11, 2)
print(a_steps)
```


### 2-D Matrices

You can create a 2-D NumPy array from a list of lists by using the `np.array()` function.

```{python}
#| code-fold: false
b = np.array([[1, 2, 3], [4, 5, 6], [7, 8, 9]])
b
```

## Some convenient functions

Here are some convenient functions that you can use to create NumPy arrays:

* `np.zeros()`: Creates an array of zeros
* `np.ones()`: Creates an array of ones
* `np.linspace()`: Creates an array of evenly spaced numbers over a specified range
* `np.eye()`: Creates an identity matrix

Let's see some examples.

### Zeros and Ones

You can create an array of zeros using the `np.zeros()` function. For example, the following code will create an array of zeros with 5 elements.

```{python}
#| code-fold: false
np.zeros(5)
```

For a 2-D array, you can specify the shape of the array as a tuple. For example, the following code will create a 2-D array of zeros with 3 rows and 4 columns.

```{python}
#| code-fold: false
np.zeros((3, 4))
```

Using ones is similar to using zeros. Let's create a 5 by 6 matrix of ones.

```{python}
#| code-fold: false
np.ones((5, 6))
```


### Linspace

The `np.linspace()` function is used to create an array of evenly spaced numbers over a specified range. For example, the following code will create an array of 10 numbers between 0 and 5.

```{python}
#| code-fold: false
np.linspace(0, 5, 10)
```

How does it differ from `np.arange()` you might ask? The `np.linspace()` function will always include the start and end values, whereas the `np.arange()` function will not include the end value.

### Eye

This function is used for creating an identity matrix. An identity matrix is a square matrix with ones on the diagonal and zeros elsewhere. We can create a 4 by 4 identity matrix with the following code.

```{python}
#| code-fold: false
np.eye(4)
```

The identity matrix has many important uses in linear algebra and other areas of mathematics.


## NumPy for Random Number Generation

Random numbers are needed for a variety of purposes in data analysis and machine learning. NumPy provides a number of functions for generating random numbers. Here are some of the most commonly used functions:

* `np.random.rand()`: Generates random numbers from a uniform distribution
* `np.random.randn()`: Generates random numbers from a standard normal distribution
* `np.random.randint()`: Generates random integers

These functions allow us to create NumPy arrays with random numbers taken from different distributions. 

### Uniform Distribution

The uniform distribution refers generally to random numbers between 0 and 1. The `np.random.rand()` function generates random numbers from a uniform distribution. For example, the following code will generate an array of 5 random numbers between 0 and 1.

```{python}
#| code-fold: false

np.random.rand(5)
```

You can also generate a 2-D array of random numbers. For example, the following code will generate a 3 by 4 array of random numbers.

```{python}
#| code-fold: false
arr = np.random.rand(3, 4)
arr
```

We can always check the shape of the array using the `shape` attribute.

```{python}
#| code-fold: false
arr.shape
```

The `shape` attribute returns a tuple with the dimensions of the array. In this case, the array has 3 rows and 4 columns. The function `reshape()` allows us to change the shape of the array. For example, we can reshape the array to have 4 rows and 3 columns, or to be one dimensional.

```{python}	
#| code-fold: false

arr.reshape(4, 3)
```

```{python}
#| code-fold: false

arr.reshape(12)
```

You might have noticed, but the two dimensional array has two square brackets on the outer edges, whereas the one dimensional array has only one square bracket per side.

Finally, we can also check the data type of the array using the `dtype` attribute. In case we want to change the data type of the array, we can use the `astype()` method.

```{python}
#| code-fold: false

arr.dtype
```

```{python}
#| code-fold: false

arr.astype(int)
```

## Array Operations

You can perform element-wise operations on NumPy arrays. For example, you can add two arrays together, subtract one array from another, multiply two arrays, and divide one array by another. Let's see some examples.

### Addition



