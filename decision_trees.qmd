---
jupyter: python3
---

# Decision Trees

Decision trees are a popular machine learning algorithm that can be used for both classification and regression tasks. They are easy to understand and interpret, and they can handle both numerical and categorical data.
Moreover, some more advanced algorithms are based on decision trees, such as Random Forests and Gradient Boosting.

Let's illustrate the concept with a classification example.

## Decision Trees for Classification

We will use the (in)famous Iris dataset, which contains information about three different species of iris flowers. The goal is to classify the species based on the sepal length, sepal width, petal length, and petal width of the flowers.
@tbl-iris-data shows a preview with a few first rows from the dataset.

```{python}
#| label: tbl-iris-data
#| tbl-cap: First few rows of the Iris dataset
 
# Load the Iris dataset
from sklearn.datasets import load_iris
iris = load_iris()

# Create a DataFrame with the feature variables
import pandas as pd
data = pd.DataFrame(iris.data, columns=iris.feature_names)

# Add the target variable to the DataFrame
data['species'] = iris.target

# Display the first few rows of the DataFrame
data.head()
```

Now let's say we would want to predict the species of an iris flower based on its sepal length and sepal width. We can train a decision tree classifier on the data and visualize the decision boundaries.

### Building a Decision Tree Classifier

```{python}
# Load the necessary libraries
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split

# Select the feature variables
X = data[['sepal length (cm)', 'sepal width (cm)']]
y = data['species']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.25, random_state=42)

# Create a decision tree classifier
tree_classifier = DecisionTreeClassifier(max_depth=3)

# Train the classifier on the training data
tree_classifier.fit(X_train, y_train)
```

This model is now trained and ready to make predictions. 
Let's look at the confusion matrix to evaluate the model's performance.

```{python}
# Load the necessary libraries
from sklearn.metrics import confusion_matrix

# Make predictions on the test data
y_pred = tree_classifier.predict(X_test)

# Compute the confusion matrix
confusion_matrix(y_test, y_pred)
```

Let's visualize the decision boundaries.