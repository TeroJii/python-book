---
jupyter: python3
---

# Pandas

Pandas is Python library for data manipulation and analysis. It provides data structures like Series and DataFrame that are designed to work with structured data very easily and efficiently. It is built on top of NumPy. You can install pandas from the terminal using pip:

```bash
pip install pandas
```

## Series

Series is a one-dimensional labeled array capable of holding any data type (integers, strings, floating point numbers, Python objects, etc.). The axis labels are collectively referred to as the index. The basic method to create a Series is to call the series constructor:

```{python}
#| code-fold: false
# import numpy and pandas libraries
import numpy as np
import pandas as pd

# create a series from a list
pd.Series(data = [1, 2, 3, 4])
```

We can see that the series look very much like the list or a NumPy array. The series also has an index that can be used to access the elements of the series, but the difference is that we can specify the index values for our series:

```{python}
#| code-fold: false
# create a series with custom index
my_series = pd.Series(data = [1, 2, 3, 4], index = ['a', 'b', 'c', 'd'])
my_series
```

We can access the elements of the series using the index values:

```{python}
#| code-fold: false
# access the elements of the series
my_series['a']
```

You can also use the dot notation:

```{python}
#| code-fold: false
# access the elements of the series using the dot notation
my_series.b
```

### Creating a Series from other data types

A List is not the only data type that can be used to create a series. You can also use a dictionary:

```{python}
#| code-fold: false

# creating a series from a dictionary
my_dict = {'a': 1, 'b': 2, 'c': 3, 'd': 4}
pd.Series(my_dict)
```

You can also create a series from a NumPy array etc.

```{python}	
#| code-fold: false

# creating a series from a NumPy array
my_array = np.array([1, 2, 3, 4])
pd.Series(my_array)
```

### Accessing elements of a Series

In addition to the index, we can use the `iloc` attribute to access the elements of the series by their position:

```{python}
#| code-fold: false
# access the elements of the series by their position
my_series.iloc[0]
```

