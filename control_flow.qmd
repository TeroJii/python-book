---
jupyter: python3
---

# Control Flow Statements

What does the title of this chapter even mean? Well, it's a fancy way of saying that we can control which parts of our program code will get executed. We can make decisions based on variable values, we can repeat actions, and we can do all sorts of things that make our programs more interesting and useful. Let's start with the most basic control flow statement: the `if` statement.

## The `if` statement

The `if` statement evaluates a condition and based on it's value (`True` or `False`) it will execute or skip a block of code.

```{python}
#| code-fold: false

if True:
    print('This will be printed')

if False:
    print('This will not be printed')
```
We are not limited to using boolean values in the condition. We can use any expression that evaluates to a boolean value.

```{python}
#| code-fold: false

name = 'Tero'

if name == 'Tero':
    # code block to be executed if the condition is True
    print('Hello Tero!')
```

You should note that unlike some other programming languages, Python does not use curly braces to define code blocks. Instead, Python uses indentation to define code blocks. The code block should be indented with 4 spaces. Most (all?) modern code editors should handle this automatically, so you needn't worry about it too much.

### Extending the `if` statement with `elif` and `else`

What if we want to execute some code also if the condition is `False`? We can use the `else` statement for that.

```{python}
#| code-fold: false

name = 'Antero'

if name == 'Tero':
    print('Hello Tero!')
else:
    print('Hello stranger!')
```

And in the case of multiple conditions, we can use the `elif` statement to check for additional conditions in case the previous conditions were `False`.

```{python}
#| code-fold: false

name = 'Antero'

if name == 'Tero':
    print('Hello Tero!')
elif name == 'Antero':
    print("Oh, it's you again!")
else:
    print('Hello stranger!')
```

## The `for` loop

