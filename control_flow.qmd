---
jupyter: python3
---

# Control Flow Statements

What does the title of this chapter even mean? Well, it's a fancy way of saying that we can control which parts of our program code will get executed. We can make decisions based on variable values, we can repeat actions, and we can do all sorts of things that make our programs more interesting and useful. Let's start with the most basic control flow statement: the `if` statement.

## The `if` statement

The `if` statement evaluates a condition and based on it's value (`True` or `False`) it will execute or skip a block of code.

```{python}
#| code-fold: false

if True:
    print('This will be printed')

if False:
    print('This will not be printed')
```
We are not limited to using boolean values in the condition. We can use any expression that evaluates to a boolean value.

```{python}
#| code-fold: false

name = 'Tero'

if name == 'Tero':
    # code block to be executed if the condition is True
    print('Hello Tero!')
```

You should note that unlike some other programming languages, Python does not use curly braces to define code blocks. Instead, Python uses indentation. The code block should be indented with 4 spaces. Most (all?) modern code editors should handle this automatically, so you needn't worry about it too much.

### Extending the `if` statement with `elif` and `else`

What if we want to execute some code also if the condition is `False`? We can use the `else` statement for that.

```{python}
#| code-fold: false

name = 'Antero'

if name == 'Tero':
    print('Hello Tero!')
else:
    print('Hello stranger!')
```

And in the case of multiple conditions, we can use the `elif` statement to check for additional conditions if the previous conditions were `False`.

```{python}
#| code-fold: false

name = 'Antero'

if name == 'Tero':
    print('Hello Tero!')
elif name == 'Antero':
    print("Oh, it's you again!")
else:
    print('Hello stranger!')
```

That is the basic idea behind the if-else statement. You can have as many `elif` statements as you want, but only one (or none) `else` statement which is located at the end. Conditions can also be nested.

```{python}
#| code-fold: false

name = 'Tero'
age = 30

if name == 'Tero':
    if age < 18:
        print('Hello young Tero!')
    else:
        print('Hello adult Tero!')
else:
    print('Hello stranger!')
```

## The `for` loop

The idea behind a loop structure is to repeat a block of code multiple times. The `for` loop is used when we know how many times we want to repeat the code block.

```{python}
#| code-fold: false

seasons = ['Spring', 'Summer', 'Autumn', 'Winter']

for season in seasons:
    print('It is now {}'.format(season))

```

The `for` loop iterates over the elements of the `seasons` list. In each iteration, the variable `season` is assigned the value of the current element. The loop continues until all elements have been iterated over. This is useful for example when we need to repeat a calculation several times.

```{python}
#| code-fold: false

squared_numbers = []

for i in range(1, 6):
    squared_numbers.append(i**2)

print(squared_numbers)
```

## The `while` loop

The `while` loop is the `for` loop's liberal cousin. It is less restrictive and repeats a block of code as long as a condition is `True`. Depending on the condition we might not know how many times the loop will be executed beforehand. The price for this freedom is that we might accidentally create an infinite loop if we're not careful. Let's look at a simple example.

```{python}
#| code-fold: false

count = 0

while count < 5:
    print('Count is {}'.format(count))
    count += 1
```

The example above could have been implemented with a `for` loop as well. As a rule of thumb a `for`loop can always be written as a `while` loop, but not the other way around. We'll come back to more complicated `while` loops later, when we learn about random number generation and the `break` and `continue` statements.