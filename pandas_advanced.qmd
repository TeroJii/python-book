---
jupyter: python3
---

# Working with DataFrames

Now that we have learned how to create DataFrames, and some basic operations, let's deepen our understanding with a few more tricks that help us work with DataFrames more efficiently. We'll start of by importing the necessary libraries.

```{python}
#| code-fold: false
import numpy as np
import pandas as pd
```

Additionally, we will use a sample dataset to demonstrate the operations. Let's load the dataset from the seaborn library.

:::{.callout-note}
Seaborn is a commonly used library for data visualization in Python. It comes with a few sample datasets that we can use for practice. We'll use the classic `iris` dataset for this tutorial. We'll learn more about Seaborn in the upcoming chapters.
:::

```{python}
#| code-fold: false
import seaborn as sns

# Load the dataset
df = sns.load_dataset('iris')
df.head()
```

As we can see, the dataset contains four features: `sepal_length`, `sepal_width`, `petal_length`, and `petal_width`. The target variable is `species`, which is the type of iris flower. We also used the `head()` method to display the first five rows of the dataset. Let's learn more about the dataset using some common methods found in Pandas.

## Common methods in Pandas

We already saw that the `head()` method displays the first five rows of the dataset. Five is the default value, but we can change in using the `n` parameter. Similarly, we can use the `tail()` method to display the last rows of the dataset.

```{python}
#| code-fold: false

# Display the last nine rows
df.tail(9)
```

The `info()` method provides a concise summary of the dataset. It displays the number of non-null values in each column, the data type of each column, and the memory usage of the dataset.

```{python}
#| code-fold: false

df.info()
```

Summary statistics can be obtained using the `describe()` method. It provides the count, mean, standard deviation, minimum, maximum, and the quartiles of the dataset. This provides a handy way of getting an overall impression of the dataset.

```{python}
#| code-fold: false

df.describe()
```

If we just want to know the number of rows and columns in the dataset, we can use the `shape` attribute.

```{python}
#| code-fold: false

df.shape
```

The `columns` attribute provides the names of the columns in the dataset.

```{python}
#| code-fold: false

df.columns
```

The `nunique()` method provides the number of unique values in each column of the dataset.

```{python}
#| code-fold: false

df.nunique()
```

## Grouping data

If you are familiar with SQL queries, you might have used the `GROUP BY` clause to group data based on a particular column. Pandas provides a similar functionality using the `groupby()` method. Grouping data allows you to calculate for example statistics like the mean for distinct groups in the dataset. Let's take a look at how this works by grouping the `iris` data based on the `species` column and calculating the mean of the other columns.

```{python}
#| code-fold: false

df.groupby('species').mean()
```

We can also target specific columns. Let's see how this works by taking the sum of the `sepal_length` for each species.

```{python}
#| code-fold: false

df.groupby('species')['sepal_length'].sum()
```

Some commonly used aggregation functions to chain after a groupby clause are `mean()`, `sum()`, `count()`, `min()`, and `max()`. We can also use the `agg()` method to apply multiple aggregation functions at once. Let's by taking the count, min, and max of the `sepal_length` and `sepal_width` columns for each species.

```{python}
#| code-fold: false

df.groupby('species')[['sepal_length', 'sepal_width']].agg(['count', 'min', 'max'])
```

## Handling missing values